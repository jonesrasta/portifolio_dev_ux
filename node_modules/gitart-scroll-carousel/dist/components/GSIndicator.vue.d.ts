declare const _default: import("vue").DefineComponent<{
    barWidthPercent: {
        type: NumberConstructor;
        required: true;
    };
    barOffsetPercent: {
        type: NumberConstructor;
        required: true;
    };
}, {
    indicatorRef: import("vue").Ref<HTMLDivElement | null | undefined>;
    barStyle: import("vue").ComputedRef<{
        width: string;
        left: string;
    }>;
    startBarX: import("vue").Ref<number>;
    startBarOffsetPercent: import("vue").Ref<number>;
    moving: import("vue").Ref<boolean>;
    onTrackClick: (event: MouseEvent) => void;
    onMouseDown: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'smooth-scroll': (_: {
        barOffsetPercent: number;
    }) => true;
    scroll: (_: {
        barOffsetPercent: number;
    }) => true;
    'scroll:start': () => true;
    'scroll:end': () => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    barWidthPercent: {
        type: NumberConstructor;
        required: true;
    };
    barOffsetPercent: {
        type: NumberConstructor;
        required: true;
    };
}>> & {
    "onSmooth-scroll"?: ((_: {
        barOffsetPercent: number;
    }) => any) | undefined;
    onScroll?: ((_: {
        barOffsetPercent: number;
    }) => any) | undefined;
    "onScroll:start"?: (() => any) | undefined;
    "onScroll:end"?: (() => any) | undefined;
}, {}>;
export default _default;
//# sourceMappingURL=GSIndicator.vue.d.ts.map