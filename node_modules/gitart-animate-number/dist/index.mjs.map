{"version":3,"file":"index.mjs","sources":["../node_modules/.pnpm/bezier-easing@2.1.0/node_modules/bezier-easing/src/index.js","../src/lib/config.ts","../src/lib/animateUsingInterval.ts","../src/lib/animate.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n","import type { BezierParams } from './types'\n\nexport const easingTypes: Record<string, BezierParams> = {\n  ease: [0.25, 0.1, 0.25, 1],\n  linear: [0, 0, 1, 1],\n  easeIn: [0.42, 0, 1, 1],\n  easeOut: [0, 0, 0.58, 1],\n  easeInOut: [0.42, 0, 0.58, 1],\n  default: [0.5, 0, 0.5, 1],\n}\n\nexport const defaults = {\n  FPS: 60,\n  BEZIER: easingTypes.default,\n}\n","\nimport BezierEasing from 'bezier-easing'\n\n// types\nimport type { IAnimateByIntervalParams, StopAnimationFn } from './types'\n\nimport { defaults } from './config'\n\n/**\n * animate number using `setInterval`\n */\nexport const animateUsingInterval = ({\n  from,\n  to,\n  duration,\n  fps = defaults.FPS,\n  bezier = defaults.BEZIER,\n  on,\n  completed,\n  stopped,\n  done,\n}: IAnimateByIntervalParams): StopAnimationFn => {\n  const easingFn = BezierEasing(...bezier)\n  const difference = to - from\n\n  const frames = Math.round(duration / (1000 / fps))\n  let frame = 1\n  let currentValue = from\n\n  const intervalId = setInterval(() => {\n    let progress = frame / frames\n    if (progress > 1)\n      progress = 1\n\n    currentValue = from + (difference * easingFn(progress))\n    on(currentValue)\n\n    if (progress === 1) {\n      clearInterval(intervalId)\n      completed?.(currentValue)\n      done?.(currentValue)\n    }\n\n    frame++\n  }, duration / frames)\n\n  return () => {\n    clearInterval(intervalId)\n    stopped?.(currentValue)\n    done?.(currentValue)\n  }\n}\n","import BezierEasing from 'bezier-easing'\n\n// types\nimport type { IParams, StopAnimationFn } from './types'\n\nimport { defaults } from './config'\n\n/**\n * animate number using `requestAnimationFrame`\n */\nexport const animate = ({\n  from,\n  to,\n  duration,\n  bezier = defaults.BEZIER,\n  on,\n  completed,\n  stopped,\n  done,\n}: IParams): StopAnimationFn => {\n  const easingFn = BezierEasing(...bezier)\n  const difference = to - from\n\n  const timestamp = Date.now()\n  let rqfId = 0\n  let currentValue = from\n\n  const fn = () => {\n    let progress = (Date.now() - timestamp) / duration\n    if (progress > 1)\n      progress = 1\n\n    currentValue = from + (difference * easingFn(progress))\n    on(currentValue)\n\n    if (progress === 1) {\n      completed?.(currentValue)\n      done?.(currentValue)\n      return\n    }\n\n    rqfId = requestAnimationFrame(fn)\n  }\n\n  rqfId = requestAnimationFrame(fn)\n\n  return () => {\n    cancelAnimationFrame(rqfId)\n    stopped?.(currentValue)\n    done?.(currentValue)\n  }\n}\n"],"names":["BezierEasing"],"mappings":"AAOA,IAAI,oBAAoB;AACxB,IAAI,mBAAmB;AACvB,IAAI,wBAAwB;AAC5B,IAAI,6BAA6B;AAEjC,IAAI,mBAAmB;AACvB,IAAI,kBAAkB,IAAO,oBAAmB;AAEhD,IAAI,wBAAwB,OAAO,iBAAiB;AAEpD,WAAY,KAAK,KAAK;AAAE,SAAO,IAAM,IAAM,MAAM,IAAM;;AACvD,WAAY,KAAK,KAAK;AAAE,SAAO,IAAM,MAAM,IAAM;;AACjD,WAAY,KAAU;AAAE,SAAO,IAAM;;AAGrC,oBAAqB,IAAI,KAAK,KAAK;AAAE,SAAS,IAAE,KAAK,GAAG,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,KAAK,EAAE,GAAG,KAAK;;AAG/F,kBAAmB,IAAI,KAAK,KAAK;AAAE,SAAO,IAAM,EAAE,KAAK,GAAG,IAAI,KAAK,KAAK,IAAM,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,GAAG;;AAEtG,yBAA0B,IAAI,IAAI,IAAI,KAAK,KAAK;AAC9C,MAAI,UAAU,UAAU,IAAI;AAC5B,KAAG;AACD,eAAW,KAAM,MAAK,MAAM;AAC5B,eAAW,WAAW,UAAU,KAAK,GAAG,IAAI;AAC5C,QAAI,WAAW,GAAK;AAClB,WAAK;AAAA,WACA;AACL,WAAK;AAAA;WAEA,KAAK,IAAI,QAAQ,IAAI,yBAAyB,EAAE,IAAI;AAC7D,SAAO;AACT;AAEA,8BAA+B,IAAI,SAAS,KAAK,KAAK;AACrD,WAAS,IAAI,GAAG,IAAI,mBAAmB,EAAE,GAAG;AAC1C,QAAI,eAAe,SAAS,SAAS,KAAK,GAAG;AAC7C,QAAI,iBAAiB,GAAK;AACxB,aAAO;AAAA;AAET,QAAI,WAAW,WAAW,SAAS,KAAK,GAAG,IAAI;AAC/C,eAAW,WAAW;AAAA;AAExB,SAAO;AACR;AAEA,sBAAuB,GAAG;AACxB,SAAO;AACT;IAEA,MAAiB,gBAAiB,KAAK,KAAK,KAAK,KAAK;AACpD,MAAI,CAAE,MAAK,OAAO,OAAO,KAAK,KAAK,OAAO,OAAO,IAAI;AACnD,UAAM,IAAI,MAAM,yCAAyC;AAAA;AAG3D,MAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,WAAO;AAAA;AAIT,MAAI,eAAe,wBAAwB,IAAI,aAAa,gBAAgB,IAAI,IAAI,MAAM,gBAAgB;AAC1G,WAAS,IAAI,GAAG,IAAI,kBAAkB,EAAE,GAAG;AACzC,iBAAa,KAAK,WAAW,IAAI,iBAAiB,KAAK,GAAG;AAAA;AAG5D,oBAAmB,IAAI;AACrB,QAAI,gBAAgB;AACpB,QAAI,gBAAgB;AACpB,QAAI,aAAa,mBAAmB;AAEpC,WAAO,kBAAkB,cAAc,aAAa,kBAAkB,IAAI,EAAE,eAAe;AACzF,uBAAiB;AAAA;AAEnB,MAAE;AAGF,QAAI,OAAQ,MAAK,aAAa,kBAAmB,cAAa,gBAAgB,KAAK,aAAa;AAChG,QAAI,YAAY,gBAAgB,OAAO;AAEvC,QAAI,eAAe,SAAS,WAAW,KAAK,GAAG;AAC/C,QAAI,gBAAgB,kBAAkB;AACpC,aAAO,qBAAqB,IAAI,WAAW,KAAK,GAAG;AAAA,eAC1C,iBAAiB,GAAK;AAC/B,aAAO;AAAA,WACF;AACL,aAAO,gBAAgB,IAAI,eAAe,gBAAgB,iBAAiB,KAAK,GAAG;AAAA;;AAIvF,SAAO,sBAAuB,GAAG;AAE/B,QAAI,MAAM,GAAG;AACX,aAAO;AAAA;AAET,QAAI,MAAM,GAAG;AACX,aAAO;AAAA;AAET,WAAO,WAAW,SAAS,CAAC,GAAG,KAAK,GAAG;AAAA;AAE3C;MCxGa,cAA4C;AAAA,EACvD,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC;AAAA,EACzB,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,EACnB,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;AAAA,EACtB,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC;AAAA,EACvB,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC5B,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B;MAEa,WAAW;AAAA,EACtB,KAAK;AAAA,EACL,QAAQ,YAAY;AACtB;MCHa,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAM,SAAS;AAAA,EACf,kBAAS,SAAS;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,MAC+C;QACzC,WAAWA,IAAa,GAAG,OAAM;QACjC,aAAa,KAAK;QAElB,SAAS,KAAK,MAAM,kBAAmB,IAAI;MAC7C,QAAQ;MACR,eAAe;QAEb,aAAa,YAAY,MAAM;QAC/B,WAAW,QAAQ;QACnB,WAAW;iBACF;mBAEE,OAAQ,aAAa,SAAS,QAAQ;OAClD,YAAY;QAEX,aAAa,GAAG;oBACJ,UAAU;6CACZ;mCACL;AAAA;;KAIR,WAAW,MAAM;SAEb,MAAM;kBACG,UAAU;uCACd;iCACH;AAAA;AAEX;MCzCa,UAAU,CAAC;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA,kBAAS,SAAS;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,MAC8B;QACxB,WAAWA,IAAa,GAAG,OAAM;QACjC,aAAa,KAAK;QAElB,YAAY,KAAK;MACnB,QAAQ;MACR,eAAe;QAEb,KAAK,MAAM;QACX,iBAAiB,QAAQ,aAAa;QACtC,WAAW;iBACF;mBAEE,OAAQ,aAAa,SAAS,QAAQ;OAClD,YAAY;QAEX,aAAa,GAAG;6CACN;mCACL;;;YAID,sBAAsB,EAAE;AAAA;UAG1B,sBAAsB,EAAE;SAEzB,MAAM;yBACU,KAAK;uCAChB;iCACH;AAAA;AAEX;;"}